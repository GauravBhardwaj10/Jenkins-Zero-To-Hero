pipeline {
  agent {
    docker {
      image 'maven:3.9.6-eclipse-temurin-17'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
      reuseNode true
    }
  }

  environment {
    DOCKER_REPO = 'gauravbhardwaj10/user-service'
    IMAGE_TAG   = "${BUILD_NUMBER}"
    SONAR_URL   = 'http://3.232.133.57:9000'
    APP_DIR     = 'java-maven-sonar-argocd-helm-k8s/spring-boot-app'
  }

  stages {
    stage('Prep agent (docker + git-safe)') {
      steps {
        sh '''
          set -e
          # docker CLI if missing (container)
          if ! command -v docker >/dev/null 2>&1; then
            apt-get update -y && apt-get install -y --no-install-recommends docker.io ca-certificates
          fi
          # fix git "dubious ownership"
          git config --global --add safe.directory "$WORKSPACE" || true
          # optional: cover tmp subdir and any other workspaces
          git config --global --add safe.directory "$WORKSPACE@tmp" || true
        '''
      }
    }

    stage('Checkout') {
      steps {
        checkout([$class: 'GitSCM',
          branches: [[name: '*/main']],
          userRemoteConfigs: [[url: 'https://github.com/GauravBhardwaj10/Jenkins-Zero-To-Hero']]
        ])
        // Avoid calling git directly; use env var from the checkout if you only need the short SHA:
        sh 'echo "Commit: ${GIT_COMMIT}" && echo "$GIT_COMMIT" | cut -c1-7'
      }
    }

    stage('Build & Test (Maven)') {
      steps {
        sh '''
          set -e
          cd "$APP_DIR"
          mvn -B -U clean package
        '''
      }
    }

    stage('Static Code Analysis (SonarQube)') {
      environment { SONAR_AUTH_TOKEN = credentials('sonarqube') }
      steps {
        sh '''
          set -e
          cd "$APP_DIR"
          mvn -B sonar:sonar \
            -Dsonar.host.url="$SONAR_URL" \
            -Dsonar.login="$SONAR_AUTH_TOKEN"
        '''
      }
    }

    stage('Build & Push Docker Image') {
      environment { REGISTRY_CREDENTIALS = credentials('docker-cred') }
      steps {
        sh '''
          set -e
          cd "$APP_DIR"
          docker build -t "$DOCKER_REPO:$IMAGE_TAG" .
          echo "$REGISTRY_CREDENTIALS_PSW" | docker login -u "$REGISTRY_CREDENTIALS_USR" --password-stdin
          docker push "$DOCKER_REPO:$IMAGE_TAG"
          docker tag "$DOCKER_REPO:$IMAGE_TAG" "$DOCKER_REPO:latest"
          docker push "$DOCKER_REPO:latest"
        '''
      }
    }

    stage('Update Deployment File & Push to Git') {
      environment {
        GIT_REPO_NAME = 'Jenkins-Zero-To-Hero'
        GIT_USER_NAME = 'GauravBhardwaj10'
        GIT_USER_EMAIL = 'gauravs10sharma@gmail.com'
        GITHUB_TOKEN = credentials('github')
      }
      steps {
        sh '''
          set -e
          git config user.email "$GIT_USER_EMAIL"
          git config user.name  "$GIT_USER_NAME"

          sed -i "s|replaceImageTag|$IMAGE_TAG|g" \
            java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml

          git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
          git commit -m "Update deployment image to version $IMAGE_TAG" || echo "No changes to commit"
          git push "https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}" HEAD:main
        '''
      }
    }
  }

  post {
    always {
      sh 'docker logout || true'
      archiveArtifacts artifacts: '**/target/*.jar', onlyIfSuccessful: false
    }
  }
}
