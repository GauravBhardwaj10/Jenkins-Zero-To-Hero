pipeline {
  agent {
    docker {
      image 'maven:3.9.6-eclipse-temurin-17'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
      reuseNode true
    }
  }

  environment {
    DOCKER_REPO = 'gauravbhardwaj10/user-service'
    IMAGE_TAG   = "${BUILD_NUMBER}"
    SONAR_URL   = 'http://3.232.133.57:9000'
    APP_DIR     = 'java-maven-sonar-argocd-helm-k8s/spring-boot-app'
  }

  stages {

    stage('Prep agent (docker + git-safe)') {
      steps {
        sh '''
          set -e
          # Install docker CLI inside the build container if missing
          if ! command -v docker >/dev/null 2>&1; then
            apt-get update -y
            apt-get install -y --no-install-recommends docker.io ca-certificates
          fi
          # Fix git "dubious ownership" for Jenkins workspace
          git config --global --add safe.directory "$WORKSPACE" || true
          git config --global --add safe.directory "$WORKSPACE@tmp" || true
        '''
      }
    }

    stage('Checkout') {
      steps {
        checkout([$class: 'GitSCM',
          branches: [[name: '*/main']],
          userRemoteConfigs: [[url: 'https://github.com/GauravBhardwaj10/Jenkins-Zero-To-Hero']],
          extensions: [[$class: 'LocalBranch', localBranch: 'main']]   // <-- check out a real local branch
        ])
        sh 'echo "Commit: ${GIT_COMMIT}" && echo "$GIT_COMMIT" | cut -c1-7'
      }
    }

    stage('Build & Test (Maven)') {
      steps {
        sh '''
          set -e
          cd "$APP_DIR"
          mvn -B -U clean package
        '''
      }
    }

    stage('Static Code Analysis (SonarQube)') {
      environment { SONAR_AUTH_TOKEN = credentials('sonarqube') }  // Secret text token
      steps {
        sh '''
          set -e
          cd "$APP_DIR"
          mvn -B sonar:sonar \
            -Dsonar.host.url="$SONAR_URL" \
            -Dsonar.login="$SONAR_AUTH_TOKEN"
        '''
      }
    }

    stage('Build & Push Docker Image') {
      steps {
        withCredentials([usernamePassword(credentialsId: 'docker-cred', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
          sh '''
            set -e
            cd "$APP_DIR"
            docker build -t "$DOCKER_REPO:$IMAGE_TAG" .
            echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
            docker push "$DOCKER_REPO:$IMAGE_TAG"
            docker tag "$DOCKER_REPO:$IMAGE_TAG" "$DOCKER_REPO:latest"
            docker push "$DOCKER_REPO:latest"
          '''
        }
      }
    }

    stage('Update Deployment File & Push to Git') {
      steps {
        // 'github' is a Secret text credential holding your GitHub PAT
        withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
          sh '''
            set -e
            git config user.email "gauravs10sharma@gmail.com"
            git config user.name  "GauravBhardwaj10"

            # Ensure local main is up-to-date and not detached
            git fetch origin main
            if git show-ref --verify --quiet refs/heads/main; then
              git checkout main
            else
              git checkout -b main
            fi
            git reset --hard origin/main

            # Bump image tag in manifest
            sed -i "s|replaceImageTag|$IMAGE_TAG|g" \
              java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml

            git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
            git commit -m "Update deployment image to version $IMAGE_TAG" || echo "No changes to commit"

            # Push using username + token
            git push "https://GauravBhardwaj10:${GITHUB_TOKEN}@github.com/GauravBhardwaj10/Jenkins-Zero-To-Hero.git" main
          '''
        }
      }
    }
  }

  post {
    always {
      sh 'docker logout || true'
      archiveArtifacts artifacts: '**/target/*.jar', onlyIfSuccessful: false
    }
  }
}
